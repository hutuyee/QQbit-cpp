# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CMake on multiple platforms

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [Release]
        c_compiler: [gcc, clang, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl

    steps:
    - uses: actions/checkout@v4

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/QQbit" >> "$GITHUB_OUTPUT"

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -S ${{ github.workspace }}

    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest --build-config ${{ matrix.build_type }}
            - name: Download and install Boost
  # You may pin to the exact commit or the version.
  # uses: MarkusJx/install-boost@51b5604fed63e1e8f76d4b564002e9e7cdcce63a
  uses: MarkusJx/install-boost@v2.4.5
  with:
    # The boost version to install, e.g. "1.73.0"
    boost_version: 
    # The toolset used to compile boost, e.g. "msvc"
    toolset: # optional, default is 
    # The platform version boost was compiled on, e.g. "18.04"
    platform_version: # optional, default is 
    # Whether the boost libraries are linked statically or dynamically
    link: # optional, default is 
    # The architecture the binaries were built for
    arch: # optional, default is x86
    # The dirctory to install boost into
    boost_install_dir: # optional, default is 
    # Wheter to use actions/cache to improve build times
    cache: # optional, default is true
                - name: Install Lua/LuaJIT
  # You may pin to the exact commit or the version.
  # uses: leafo/gh-actions-lua@35bcb06abec04ec87df82e08caa84d545348536e
  uses: leafo/gh-actions-lua@v10.0.0
  with:
    # The version of Lua to install, must be available on https://www.lua.org/ftp/ or http://luajit.org/download.html
    luaVersion: # optional, default is 5.4
    # Command line flags passed to make when building Lua
    luaCompileFlags: # optional
    # Set to 'false' to skip restoring .lua from cache and always compile it
    buildCache: # optional, default is true
          
